/*
 * This file is generated by jOOQ.
 */
package io.pet.database.tables;


import io.pet.database.Indexes;
import io.pet.database.Keys;
import io.pet.database.Public;
import io.pet.database.tables.records.CommentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 890342282;

    /**
     * The reference instance of <code>public.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>public.comment.id</code>.
     */
    public final TableField<CommentRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('comment_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.comment.eid</code>.
     */
    public final TableField<CommentRecord, Integer> EID = createField("eid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('comment_eid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.comment.posted</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> POSTED = createField("posted", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.comment.uid</code>.
     */
    public final TableField<CommentRecord, Integer> UID = createField("uid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('comment_uid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.comment.details</code>.
     */
    public final TableField<CommentRecord, String> DETAILS = createField("details", org.jooq.impl.SQLDataType.VARCHAR(120).nullable(false), this, "");

    /**
     * Create a <code>public.comment</code> table reference
     */
    public Comment() {
        this(DSL.name("comment"), null);
    }

    /**
     * Create an aliased <code>public.comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>public.comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COMMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CommentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.COMMENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CommentRecord>>asList(Keys.COMMENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CommentRecord, ?>>asList(Keys.COMMENT__COMMENT_EID_FKEY, Keys.COMMENT__COMMENT_UID_FKEY);
    }

    public Event event() {
        return new Event(this, Keys.COMMENT__COMMENT_EID_FKEY);
    }

    public User user() {
        return new User(this, Keys.COMMENT__COMMENT_UID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }
}
