/*
 * This file is generated by jOOQ.
 */
package io.pet.database.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.async.AbstractAsyncVertxDAO;
import io.pet.database.tables.Comment;
import io.pet.database.tables.records.CommentRecord;

import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;


import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.async.AsyncClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommentDao extends AbstractAsyncVertxDAO<CommentRecord, io.pet.database.tables.pojos.Comment, Integer, Future<List<io.pet.database.tables.pojos.Comment>>, Future<io.pet.database.tables.pojos.Comment>, Future<Integer>, Future<Integer>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<CommentRecord,io.pet.database.tables.pojos.Comment,Integer> {

    /**
     * @param configuration Used for rendering, so only SQLDialect must be set and must be one of the MYSQL types or POSTGRES.
     * @param delegate A configured AsyncSQLClient that is used for query execution
     */
    public CommentDao(Configuration configuration, io.vertx.ext.asyncsql.AsyncSQLClient delegate) {
        super(Comment.COMMENT, io.pet.database.tables.pojos.Comment.class, new AsyncClassicQueryExecutor<CommentRecord,io.pet.database.tables.pojos.Comment,Integer>(configuration,delegate,io.pet.database.tables.pojos.Comment::new, Comment.COMMENT));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(io.pet.database.tables.pojos.Comment object) {
        return object.getId();
    }

    /**
     * Find records that have <code>eid IN (values)</code> asynchronously
     */
    public Future<List<io.pet.database.tables.pojos.Comment>> findManyByEid(List<Integer> values) {
        return findManyByCondition(Comment.COMMENT.EID.in(values));
    }

    /**
     * Find records that have <code>timestamp IN (values)</code> asynchronously
     */
    public Future<List<io.pet.database.tables.pojos.Comment>> findManyByTimestamp(List<Timestamp> values) {
        return findManyByCondition(Comment.COMMENT.TIMESTAMP.in(values));
    }

    /**
     * Find records that have <code>uid IN (values)</code> asynchronously
     */
    public Future<List<io.pet.database.tables.pojos.Comment>> findManyByUid(List<Integer> values) {
        return findManyByCondition(Comment.COMMENT.UID.in(values));
    }

    /**
     * Find records that have <code>details IN (values)</code> asynchronously
     */
    public Future<List<io.pet.database.tables.pojos.Comment>> findManyByDetails(List<String> values) {
        return findManyByCondition(Comment.COMMENT.DETAILS.in(values));
    }

    @Override
    public AsyncClassicQueryExecutor<CommentRecord,io.pet.database.tables.pojos.Comment,Integer> queryExecutor(){
        return (AsyncClassicQueryExecutor<CommentRecord,io.pet.database.tables.pojos.Comment,Integer>) super.queryExecutor();
    }

    @Override
    protected java.util.function.Function<Object,Integer> keyConverter(){
        return lastId -> Integer.valueOf(((io.vertx.core.json.JsonArray)lastId).getLong(0).intValue());
    }
}
